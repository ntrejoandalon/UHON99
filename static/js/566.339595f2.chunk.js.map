{"version":3,"file":"static/js/566.339595f2.chunk.js","mappings":"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","sources":["components/ContentBlock/styles.ts","components/ContentBlock/index.tsx","common/Button/styles.ts","common/Button/index.tsx","common/SvgIcon/index.tsx"],"sourcesContent":["import { Row } from \"antd\";\r\nimport styled from \"styled-components\";\r\n\r\ninterface StyledRowProps {\r\n  direction: \"left\" | \"right\";\r\n}\r\n\r\n\r\nexport const ContentSection = styled(\"section\")`\r\n  position: relative;\r\n  padding: 10rem 0 8rem;\r\n\r\n  @media only screen and (max-width: 1024px) {\r\n    padding: 4rem 0 4rem;\r\n  }\r\n`;\r\n\r\nexport const Content = styled(\"p\")`\r\n  margin: 1.5rem 0 2rem 0;\r\n`;\r\n\r\nexport const StyledRow = styled(Row)<StyledRowProps>`\r\n  flex-direction: ${({ direction }) => (direction === \"left\" ? \"row\" : \"row-reverse\")};\r\n`;\r\n\r\n\r\nexport const ContentWrapper = styled(\"div\")`\r\n  position: relative;\r\n  max-width: 540px;\r\n\r\n  @media only screen and (max-width: 575px) {\r\n    padding-top: 4rem;\r\n  }\r\n`;\r\n\r\nexport const ServiceWrapper = styled(\"div\")`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  max-width: 100%;\r\n`;\r\n\r\nexport const MinTitle = styled(\"h6\")`\r\n  font-size: 15px;\r\n  line-height: 1rem;\r\n  padding: 0.5rem 0;\r\n  text-transform: uppercase;\r\n  color: #000;\r\n  font-family: \"Motiva Sans Light\", sans-serif;\r\n`;\r\n\r\nexport const MinPara = styled(\"p\")`\r\n  font-size: 13px;\r\n`;\r\n\r\nexport const ButtonWrapper = styled(\"div\")`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  max-width: 100%;\r\n\r\n  @media screen and (min-width: 1024px) {\r\n    max-width: 80%;\r\n  }\r\n\r\n  button:last-child {\r\n    margin-left: 20px;\r\n  }\r\n`;\r\n","import { Row, Col } from \"antd\";\r\nimport { Fade } from \"react-awesome-reveal\";\r\n\r\nimport { ContentBlockProps } from \"./types\";\r\nimport { Button } from \"../../common/Button\";\r\nimport { SvgIcon } from \"../../common/SvgIcon\";\r\nimport {\r\n  ContentSection,\r\n  Content,\r\n  ContentWrapper,\r\n  ServiceWrapper,\r\n  MinTitle,\r\n  MinPara,\r\n  StyledRow,\r\n  ButtonWrapper,\r\n} from \"./styles\";\r\n\r\nconst ContentBlock = ({\r\n  icon,\r\n  title,\r\n  content,\r\n  section,\r\n  button,\r\n  id,\r\n  direction,\r\n}: ContentBlockProps) => {\r\n  const scrollTo = (id: string) => {\r\n    const element = document.getElementById(id) as HTMLDivElement;\r\n    element.scrollIntoView({\r\n      behavior: \"smooth\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <ContentSection>\r\n      <Fade direction={direction} triggerOnce>\r\n        <StyledRow\r\n          justify=\"space-between\"\r\n          align=\"middle\"\r\n          id={id}\r\n          direction={direction}\r\n        >\r\n          <Col lg={11} md={11} sm={12} xs={24}>\r\n            <SvgIcon src={icon} width=\"100%\" height=\"100%\" />\r\n          </Col>\r\n          <Col lg={11} md={11} sm={11} xs={24}>\r\n            <ContentWrapper>\r\n              <h6>{title}</h6>\r\n              <Content>{content}</Content>\r\n              {direction === \"right\" ? (\r\n                <ButtonWrapper>\r\n                  {typeof button === \"object\" &&\r\n                    button.map(\r\n                      (\r\n                        item: {\r\n                          color?: string;\r\n                          title: string;\r\n                        },\r\n                        id: number\r\n                      ) => {\r\n                        return (\r\n                          <Button\r\n                            key={id}\r\n                            color={item.color}\r\n                            onClick={() => scrollTo(\"about\")}\r\n                          >\r\n                            {item.title}\r\n                          </Button>\r\n                        );\r\n                      }\r\n                    )}\r\n                </ButtonWrapper>\r\n              ) : (\r\n                <ServiceWrapper>\r\n                  <Row justify=\"space-between\">\r\n                    {typeof section === \"object\" &&\r\n                      section.map(\r\n                        (\r\n                          item: {\r\n                            title: string;\r\n                            content: string;\r\n                            icon: string;\r\n                          },\r\n                          id: number\r\n                        ) => {\r\n                          return (\r\n                            <Col key={id} span={11}>\r\n                              <SvgIcon\r\n                                src={item.icon}\r\n                                width=\"60px\"\r\n                                height=\"60px\"\r\n                              />\r\n                              <MinTitle>{item.title}</MinTitle>\r\n                              <MinPara>{item.content}</MinPara>\r\n                            </Col>\r\n                          );\r\n                        }\r\n                      )}\r\n                  </Row>\r\n                </ServiceWrapper>\r\n              )}\r\n            </ContentWrapper>\r\n          </Col>\r\n        </StyledRow>\r\n      </Fade>\r\n    </ContentSection>\r\n  );\r\n};\r\n\r\nexport default ContentBlock;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledButton = styled(\"button\")<{ color?: string }>`\r\n  background: ${(p) => p.color || \"#2e186a\"};\r\n  color: ${(p) => (p.color ? \"#2E186A\" : \"#fff\")};\r\n  font-size: 1rem;\r\n  font-weight: 700;\r\n  width: 100%;\r\n  border: 1px solid #edf3f5;\r\n  border-radius: 4px;\r\n  padding: 13px 0;\r\n  cursor: pointer;\r\n  margin-top: 0.625rem;\r\n  max-width: 180px;\r\n  transition: all 0.3s ease-in-out;\r\n  box-shadow: 0 16px 30px rgb(23 31 114 / 20%);\r\n\r\n  &:hover,\r\n  &:active,\r\n  &:focus {\r\n    color: #fff;\r\n    border: 1px solid rgb(255, 130, 92);\r\n    background-color: rgb(255, 130, 92);\r\n  }\r\n`;\r\n","import { StyledButton } from \"./styles\";\r\nimport { ButtonProps } from \"../types\";\r\n\r\nexport const Button = ({ color, children, onClick }: ButtonProps) => (\r\n  <StyledButton color={color} onClick={onClick}>\r\n    {children}\r\n  </StyledButton>\r\n);\r\n","import { SvgIconProps } from \"../types\";\r\n\r\nexport const SvgIcon = ({ src, width, height }: SvgIconProps) => (\r\n  <img src={`/img/svg/${src}`} alt={src} width={width} height={height} />\r\n);\r\n"],"names":["ContentSection","styled","Content","StyledRow","Row","_ref","direction","ContentWrapper","ServiceWrapper","MinTitle","MinPara","ButtonWrapper","icon","title","content","section","button","id","_jsx","children","Fade","triggerOnce","_jsxs","justify","align","Col","lg","md","sm","xs","SvgIcon","src","width","height","map","item","Button","color","onClick","document","getElementById","scrollIntoView","behavior","scrollTo","span","StyledButton","p","alt"],"sourceRoot":""}